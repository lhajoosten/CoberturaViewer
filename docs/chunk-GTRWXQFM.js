import{a as c}from"./chunk-XC5NQH5T.js";import{O as n,T as l,g as s}from"./chunk-SU5VR5TY.js";var g=class a{constructor(e){this.ToastService=e;this.loadRecentFiles(),console.log("FileHistoryService initialized")}files=new s([]);FILE_LIST_KEY="coverage-files";CONTENT_PREFIX="coverage-content-";getFiles(){return this.files.asObservable()}getFileContent(e){try{let t=localStorage.getItem(`${this.CONTENT_PREFIX}${e}`);return t||console.error(`No content found for file ID: ${e}`),t}catch(t){return console.error("Error retrieving file content:",t),null}}addFile(e,t){try{let r=this.files.getValue().filter(o=>o.id!==e.id&&o.name!==e.name);if(r.unshift(e),r.length>30){let o=r.pop();o&&localStorage.removeItem(`${this.CONTENT_PREFIX}${o.id}`)}localStorage.setItem(`${this.CONTENT_PREFIX}${e.id}`,t),this.saveFiles(r),this.files.next(r),console.log("File added to history:",e.name)}catch(i){console.error("Error adding file to history:",i),this.ToastService.showError("File History Error","Could not save file to history")}}removeFile(e){try{let t=this.files.getValue(),i=t.filter(r=>r.id!==e);if(i.length===t.length){console.warn(`File with ID ${e} not found`);return}localStorage.removeItem(`${this.CONTENT_PREFIX}${e}`),this.saveFiles(i),this.files.next(i)}catch(t){console.error("Error removing file:",t),this.ToastService.showError("File History Error","Could not remove file from history")}}clearHistory(){try{let e=this.files.getValue();for(let t of e)localStorage.removeItem(`${this.CONTENT_PREFIX}${t.id}`);localStorage.removeItem(this.FILE_LIST_KEY),this.files.next([])}catch(e){console.error("Error clearing file history:",e),this.ToastService.showError("File History Error","Could not clear file history")}}saveFiles(e){try{localStorage.setItem(this.FILE_LIST_KEY,JSON.stringify(e))}catch(t){console.error("Error saving files to localStorage:",t)}}loadRecentFiles(){try{let e=localStorage.getItem(this.FILE_LIST_KEY);if(!e){console.log("No files found in localStorage"),this.files.next([]);return}let t=[];try{let i=JSON.parse(e);if(Array.isArray(i))t=i,t.forEach(r=>{typeof r.date=="string"&&(r.date=new Date(r.date))});else throw new Error("Invalid file list format")}catch(i){console.error("Failed to parse file list:",i),this.files.next([]);return}t.sort((i,r)=>{let o=i.date instanceof Date?i.date.getTime():new Date(i.date).getTime();return(r.date instanceof Date?r.date.getTime():new Date(r.date).getTime())-o}),console.log(`Loaded ${t.length} files from localStorage`),this.files.next(t)}catch(e){console.error("Error loading file history:",e),this.files.next([])}}extractCoverageSummary(e){try{let t=e.match(/<coverage[^>]*/);if(t){let i=t[0].match(/line-rate="([^"]*)"/),r=t[0].match(/branch-rate="([^"]*)"/),o=t[0].match(/timestamp="([^"]*)"/);if(i)return{lineCoverage:parseFloat(i[1])*100,timestamp:o?o[1]:new Date().toISOString(),branchCoverage:r?parseFloat(r[1])*100:void 0}}return}catch(t){console.error("Error extracting coverage summary:",t);return}}static \u0275fac=function(t){return new(t||a)(l(c))};static \u0275prov=n({token:a,factory:a.\u0275fac,providedIn:"root"})};var v=class a{navigatingTo={};navigationTimers={};constructor(){window.addEventListener("beforeunload",()=>this.clearAllNavigations())}isNavigatingTo(e){return this.navigatingTo[e]===!0}startNavigation(e,t=2e3){console.log(`Starting navigation to ${e}`),this.navigatingTo[e]=!0,this.navigationTimers[e]&&clearTimeout(this.navigationTimers[e]),this.navigationTimers[e]=setTimeout(()=>{console.log(`Navigation timeout for ${e}`),this.endNavigation(e)},t)}endNavigation(e){console.log(`Ending navigation to ${e}`),this.navigatingTo[e]=!1,this.navigationTimers[e]&&(clearTimeout(this.navigationTimers[e]),this.navigationTimers[e]=null)}clearAllNavigations(){console.log("Clearing all navigations"),Object.keys(this.navigationTimers).forEach(e=>{this.navigationTimers[e]&&(clearTimeout(this.navigationTimers[e]),this.navigationTimers[e]=null)}),this.navigatingTo={}}static \u0275fac=function(t){return new(t||a)};static \u0275prov=n({token:a,factory:a.\u0275fac,providedIn:"root"})};export{g as a,v as b};
