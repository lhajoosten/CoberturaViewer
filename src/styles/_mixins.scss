// Clearfix mixin to clear floated children
// Includes a "zoom" property for older IE support.
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
  // IE6/7 fix
  *zoom: 1;
}

// Transition mixin for smooth animations with vendor prefixes.
// Added an optional $vendor parameter to easily disable vendor prefixes if needed.
@mixin transition(
  $properties,
  $duration: 0.3s,
  $timing: ease-in-out,
  $vendor: true
) {
  @if $vendor {
    -webkit-transition: $properties $duration $timing;
    -moz-transition: $properties $duration $timing;
    -o-transition: $properties $duration $timing;
  }
  transition: $properties $duration $timing;
}

// Flexbox center mixin to center content both horizontally and vertically.
// Added an optional $direction parameter to set the flex-direction.
@mixin flex-center($direction: row) {
  display: -webkit-box; // OLD - iOS 6-, Safari 3.1-6
  display: -ms-flexbox; // TWEENER - IE 10
  display: flex;
  flex-direction: $direction;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

// Box-shadow mixin with vendor prefixes
// Uses variable argument syntax for multiple shadows.
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}

// Responsive mixin to handle common breakpoints.
// Added a warning for unknown breakpoints.
@mixin responsive($breakpoint) {
  @if $breakpoint == large {
    @media (min-width: 1440px) {
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (min-width: 1024px) and (max-width: 1439px) {
      @content;
    }
  } @else if $breakpoint == tablet {
    @media (min-width: 768px) and (max-width: 1023px) {
      @content;
    }
  } @else if $breakpoint == mobile {
    @media (max-width: 767px) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint `#{$breakpoint}` provided.";
  }
}
// Gradient background mixin with vendor prefixes
// Creates a linear gradient from $start to $end in the specified direction.
@mixin gradient-bg($start, $end, $direction: to right) {
  background: $start;
  background: -webkit-linear-gradient($direction, $start, $end);
  background: -moz-linear-gradient($direction, $start, $end);
  background: -o-linear-gradient($direction, $start, $end);
  background: linear-gradient($direction, $start, $end);
}

// Aspect ratio mixin using the padding-top hack
// Wrap your content in a container with the .content class.
@mixin aspect-ratio($width, $height) {
  position: relative;
  &::before {
    content: "";
    display: block;
    padding-top: (100% * $height / $width);
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

// Text ellipsis mixin for single-line truncation
@mixin text-ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Visually hidden mixin to hide elements while keeping them accessible for screen readers
@mixin visually-hidden {
  position: absolute !important;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Font smoothing mixin for better text rendering on some browsers
// Center-absolute mixin to center an element absolutely within its relative container
@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
}

// Background cover mixin to ensure background images cover the container
@mixin background-cover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

// Grid container mixin for setting up a basic CSS Grid layout with a customizable gutter
@mixin grid-container($gutter: 16px) {
  display: grid;
  grid-gap: $gutter;
}

// Rotate mixin for applying rotation with vendor prefixes
@mixin rotate($deg) {
  transform: rotate($deg);
  -webkit-transform: rotate($deg);
  -ms-transform: rotate($deg);
}

// Opacity transition mixin to smoothly change the opacity property with vendor prefixes
@mixin opacity-transition($duration: 0.3s, $timing: ease-in-out) {
  @include transition(opacity, $duration, $timing);
}
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}

@mixin multi-line-ellipsis($lines: 2, $line-height: 1.2em) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  line-height: $line-height;
  max-height: calc(#{$line-height} * #{$lines});
}

@mixin z-index($level: "base") {
  $z-indexes: (
    "modal": 100,
    "dropdown": 50,
    "header": 30,
    "footer": 20,
    "base": 1,
    "below": -1,
  );

  z-index: map-get($z-indexes, $level);
}

@mixin focus-outline($color: #4d90fe, $offset: 2px) {
  outline: 2px solid $color;
  outline-offset: $offset;
}

@mixin hide-scrollbar {
  overflow: hidden;
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none; // IE and Edge
  scrollbar-width: none; // Firefox
}

@mixin show-scrollbar {
  overflow: auto;
  &::-webkit-scrollbar {
    display: block;
  }
  -ms-overflow-style: auto; // IE and Edge
  scrollbar-width: auto; // Firefox
}

@mixin hide-scrollbar-x {
  overflow-x: hidden;
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none; // IE and Edge
  scrollbar-width: none; // Firefox
}

@mixin hide-scrollbar-y {
  overflow-y: hidden;
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none; // IE and Edge
  scrollbar-width: none; // Firefox
}

@mixin show-scrollbar-x {
  overflow-x: auto;
  &::-webkit-scrollbar {
    display: block;
  }
  -ms-overflow-style: auto; // IE and Edge
  scrollbar-width: auto; // Firefox
}

@mixin show-scrollbar-y {
  overflow-y: auto;
  &::-webkit-scrollbar {
    display: block;
  }
  -ms-overflow-style: auto; // IE and Edge
  scrollbar-width: auto; // Firefox
}

// Responsive font size mixin to adjust font size based on viewport width
@mixin responsive-font($min-size, $max-size, $min-width, $max-width) {
  font-size: $min-size;
  @media (min-width: $min-width) and (max-width: $max-width) {
    font-size: calc(
      #{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}) /
            (#{$max-width} - #{$min-width}))
    );
  }
}

// CSS Grid item mixin for setting grid column and row spans
@mixin grid-item($col-start, $col-end, $row-start, $row-end) {
  grid-column: $col-start / $col-end;
  grid-row: $row-start / $row-end;
}

// CSS Grid item mixin for setting grid area
@mixin grid-area($area) {
  grid-area: $area;
}

// CSS Grid item mixin for setting grid template areas
@mixin grid-template-areas($areas) {
  display: grid;
  grid-template-areas: $areas;
}

// CSS Grid item mixin for setting grid template columns and rows
@mixin grid-template($columns, $rows) {
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
}
